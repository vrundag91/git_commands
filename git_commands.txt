Git Commands 

# Authorization 

1. git config --global user.name Vrunda
2. git config --global user.email vrunda.g@ahduni.edu.in

# Check the Authentication

3. git config --global user.name
4. git config --global user.email
 
# Opening the editor 

5. code . [Opening the VS code]
6. start notepad++ [Opening the notepad++]

# Initializing the Git Repository

7. git init [This will initialize the repository in the current folder and create .git hiddne folder]

# Checking the files (-ls group commands)

8. ls -lart [This shows the hidden files and other files from the directory]

# Checking your files status and saving/managing files

9. git status [show the status of the file -- untracked -- unmodified -- modified -- staged]
9.1 git status -s [show the status in shot representation - the first position shows staged status and second position shows working tree status]
10. git add filename [This will send the file in staged status]
10.1 git add . [Adding all files togather]
10.2 git add -A [Adding all files togather]
11. git commit [This will save the file in repository -- only git commit will open the VI editor to write the commit message]
12. git commit -m type your message [This will save the file with the given message]
12.1 git commit -a -m type your message [this will directly commit the file without adding]

# Creating a new file 

13. touch filename [This will create new file in the current folder]

# Clearing the terminal 

14. Clear

# Recovering the modified file befor commit 

15. git checkout filename [recovering specific file]
16. git checkout -f [recovering all the files togather from the folder]

# checking Logs in git

17. git log [list of all the commits]
18. PRESS q [to exit git log]
19. git log -p -5 [list of last 5 commits]

# Checking the difference in the files

20. git diff [shows the difference like -- file befor and --file after]
21. git diff --staged [compare file with thast staged file]

# Removing the files

21. git rm filename [delete the file from the current directory]
22. git rm --cached [delete the file only from staged status]

# Ignoring the File 

23. touch .gitignore [Creating the ignore file]

# Branches in git

24. git branch branchname [creating a new branch]
25. git branch [checking the branch(es)]
26. git checkout branchname [switching to the given branch]
27. git merge branchname [merging the branch with master branch]
28. git checkout -b new_branch_name [creating a new branch and switching in it immidiatly]

# Push the repository to the remote repository on GitHub

29. git remote add origin github_repo_url [eshtablish the local repo with some short name -- here origin -- getting ready for push]
30. git remote [Shows the remote name -- here origin]
31. git remote -v [shows the origin with URL]
32. git push origin master [push the master branch]
32.1 git push -u origin master [after this whenever we use push commend it will push the code in master branch]

# Pushing the branches into github

    1. shwitch to the branch on local machine 
    2. use command 32 to push the specific branch name [consider master as banch name]

# Read-Write Access for private repository

Command number 32 will not work if the repository is created as "Private". so to push our code in private repository, we need to get read-write access. 

    1. go to settings
    2. go to SSH and GPG keys [providing access to remote repository to get data from local machine]
    3. generate the SSH key 
        3.1 select "generating SSH Keys"
        3.2 select "generating the new SSH key and adding it to the SSH-agent"
        3.3 copy this command to git bash : $ ssh-keygen -t ed25519 -C "your_email@example.com"
        3.4 you can see the generated key in git bash
    4. Deploy the SSH key
        4.1 run the command : eval "(ssh-agent -s)" [This will provide agent pid as output]
        4.2 add the ssh using command: ssh-add ~/.ssh/id_ed25519 [replace this with your key file name]
        4.3 Select "Adding a new SSH keys to your github account"
        4.4 see the public key : cat ~/.ssh/id_rsa.pub 
        4.5 copy the public key which you can see with cat command 
        4.6 Go to SSH and GPG keys and added the copied public key into "Add new SSH key"
        4.7 Add an appropriate title to the new key

33. git remote set-url origin "paste the link from github from SSH section"

After this procedure we can run command 32 to push our repository.  

# Cloning or Taking a new repository from github

    1. create a new folder in your local machine
    2. open git bash from that folder

34. git clone "paste the url of the repository"




 
